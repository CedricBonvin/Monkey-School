{"remainingRequest":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/src/views/admin.vue?vue&type=template&id=455d2bb6&scoped=true&","dependencies":[{"path":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/src/views/admin.vue","mtime":1635718095396},{"path":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cedric-bonvin/Documents/alloMonkey/monkey-school/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiYm9keSIgfSwKICAgIFsKICAgICAgX2MoImgxIiwgW192bS5fdigiIEFETUlOSVNUUkFUSU9OIildKSwKICAgICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvblJlY2hlcmNoZSIgfSwgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlJlY2hlcmNoZXIgZGVzIHBhcnRpY2lwYW50cyA6IildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJveFJlY2hlcmNoZSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJub21Db3VycyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJOb20gZHUgY291cnMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5xdWVyeS50eXBlQ291cnMsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInF1ZXJ5LnR5cGVDb3VycyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6ICJub21Db3VycyIsIGlkOiAibm9tQ291cnMiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICBfdm0ucXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAidHlwZUNvdXJzIiwKICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJudWxsIiB9IH0sIFtfdm0uX3YoIlRvdXMiKV0pLAogICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJyZWd1bGllciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigicmVndWxpZXIiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogIk5vZWwiIH0gfSwgW192bS5fdigiTm9lbCIpXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJub21FbGV2ZSIgfSB9LCBbX3ZtLl92KCJOb20gRWxldmUiKV0pLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucXVlcnkubm9tRWxldmUsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJxdWVyeS5ub21FbGV2ZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICBuYW1lOiAibm9tRWxldmUiLAogICAgICAgICAgICAgICAgaWQ6ICJub21FbGV2ZSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogIm51bGwiLAogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJleC46IERlIGxhIHRvdXIiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnF1ZXJ5Lm5vbUVsZXZlIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnF1ZXJ5LCAibm9tRWxldmUiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJidXR0b25DaGVyY2hlciIsIG9uOiB7IGNsaWNrOiBfdm0ucmVjaGVyY2hlIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIkNIRUNIRVIiKV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlUXVlcnkiIH0sIFsKICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS50aXRsZVF1ZXJ5KSkKICAgICAgXSksCiAgICAgIF92bS5fbChfdm0uY291cnMsIGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gX2MoImRpdiIsIHsga2V5OiBpdGVtLm5vbSwgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiBpdGVtLl9pZCB9IH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJlbGV2ZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNsZWZFbGV2ZSIgfSwgW192bS5fdigiTm9tIildKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmVsZXZlLm5vbUVsZXZlKSldKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNsZWZFbGV2ZSIgfSwgW192bS5fdigiUHJlbm9tICIpXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdihfdm0uX3MoaXRlbS5lbGV2ZS5wcmVub21FbGV2ZSkpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmRWxldmUiIH0sIFtfdm0uX3YoIkFnZSAiKV0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIFtfdm0uX3YoX3ZtLl9zKGl0ZW0uZWxldmUuYWdlRWxldmUpKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZkVsZXZlIiB9LCBbX3ZtLl92KCJOcGEgIildKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmVsZXZlLm5wYUVsZXZlKSldKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNsZWZFbGV2ZSIgfSwgW192bS5fdigidmlsbGUgIildKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KF92bS5fcyhpdGVtLmVsZXZlLnZpbGxlRWxldmUpKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZkVsZXZlIiB9LCBbX3ZtLl92KCJBZHJlc3NlICIpXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgW192bS5fdihfdm0uX3MoaXRlbS5lbGV2ZS5hZHJlc3NlRWxldmUpKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm94QnV0dG9uIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYWZmaWNoZXJJbmZvQ291cnMoaXRlbSwgIi5ib3hJbmZvIiwgJGV2ZW50KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIklORk8gQ09VUlMiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFmZmljaGVySW5mb0NvdXJzKGl0ZW0sICIuYm94Q29udGFjdCIsICRldmVudCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJDT05UQUNUIEVMRVZFIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIiBib3ggYm94SW5mbyIsIHN0YXRpY1N0eWxlOiB7IGRpc3BsYXk6ICJub25lIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiSU5GTyBEVSBDT1VSUyA6IildKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZiIgfSwgW192bS5fdigiVHlwZSBkZSBjb3VycyA6IildKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIgIiArIF92bS5fcyhpdGVtLmluZm9Db3Vycy50eXBlQ291cnMpKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZiIgfSwgW192bS5fdigiTm9tIGR1IGNvdXJzIDoiKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0uaW5mb0NvdXJzLm5vbUNvdXJzKSldKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpZ25lIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNsZWYiIH0sIFtfdm0uX3YoIlByaXggZHUgY291cnMgOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5pbmZvQ291cnMucHJpeCkpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbX3ZtLl92KCJQcml4IMOgIFBheWVyIDoiKV0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiAiICsgX3ZtLl9zKGl0ZW0uaW5mb0NvdXJzLnByaXhBUGF5ZSkpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkRhdGVzIENob2lzaWUgOiIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKGl0ZW0uaW5mb0NvdXJzLmRhdGVDaG9pc2llTm9lbCwgZnVuY3Rpb24oZGF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJkaXYiLCB7IGtleTogZGF0ZS5pZCB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoImZyLUZSIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlZWtkYXk6ICJsb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyOiAibnVtZXJpYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGg6ICJsb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXk6ICJudW1lcmljIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEYXRlIGQnaW5zY3JpcHRpb24gOiIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5mb0NvdXJzLmRhdGVJbnNjcmlwdGlvbgogICAgICAgICAgICAgICAgICAgICAgICApLnRvTG9jYWxlRGF0ZVN0cmluZygiZnItRlIiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2Vla2RheTogImxvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHllYXI6ICJudW1lcmljIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aDogImxvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRheTogIm51bWVyaWMiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICApICsgIiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiIGJveCBib3hDb250YWN0IiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGRpc3BsYXk6ICJub25lIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJDT05UQUNUIERFIEwnRUxFVkUiKV0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbX3ZtLl92KCJOb20gOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb250YWN0Lm5vbUNvbnRhY3QpKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZiIgfSwgW192bS5fdigiUHLDqW5vbSA6IildKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIgIiArIF92bS5fcyhpdGVtLmNvbnRhY3QucHJlbm9tQ29udGFjdCkpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbX3ZtLl92KCJOcGEgOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb250YWN0Lm5wYUNvbnRhY3QpKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZiIgfSwgW192bS5fdigiQWRyZXNzZSA6IildKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCIgIiArIF92bS5fcyhpdGVtLmNvbnRhY3QuYWRyZXNzZUNvbnRhY3QpKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlnbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2xlZiIgfSwgW192bS5fdigidmlsbGUgOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb250YWN0LnZpbGxlQ29udGFjdCkpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbX3ZtLl92KCJ0w6lsw6lwaG9ubmUgOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb250YWN0LnBob25lQ29udGFjdCkpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaWduZSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjbGVmIiB9LCBbX3ZtLl92KCJFLW1haWwgOiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb250YWN0Lm1haWxDb250YWN0KSldKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgfSkKICAgIF0sCiAgICAyCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}